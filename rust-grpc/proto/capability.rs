// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `capability.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct MultiProtocolCapability {
    // message fields
    pub family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MultiProtocolCapability {
    fn default() -> &'a MultiProtocolCapability {
        <MultiProtocolCapability as ::protobuf::Message>::default_instance()
    }
}

impl MultiProtocolCapability {
    pub fn new() -> MultiProtocolCapability {
        ::std::default::Default::default()
    }

    // .gobgpapi.Family family = 1;


    pub fn get_family(&self) -> &super::gobgp::Family {
        self.family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    pub fn has_family(&self) -> bool {
        self.family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: super::gobgp::Family) {
        self.family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut super::gobgp::Family {
        if self.family.is_none() {
            self.family.set_default();
        }
        self.family.as_mut().unwrap()
    }

    // Take field
    pub fn take_family(&mut self) -> super::gobgp::Family {
        self.family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }
}

impl ::protobuf::Message for MultiProtocolCapability {
    fn is_initialized(&self) -> bool {
        for v in &self.family {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.family)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.family.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MultiProtocolCapability {
        MultiProtocolCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "family",
                    |m: &MultiProtocolCapability| { &m.family },
                    |m: &mut MultiProtocolCapability| { &mut m.family },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MultiProtocolCapability>(
                    "MultiProtocolCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MultiProtocolCapability {
        static mut instance: ::protobuf::lazy::Lazy<MultiProtocolCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MultiProtocolCapability,
        };
        unsafe {
            instance.get(MultiProtocolCapability::new)
        }
    }
}

impl ::protobuf::Clear for MultiProtocolCapability {
    fn clear(&mut self) {
        self.family.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MultiProtocolCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MultiProtocolCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteRefreshCapability {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteRefreshCapability {
    fn default() -> &'a RouteRefreshCapability {
        <RouteRefreshCapability as ::protobuf::Message>::default_instance()
    }
}

impl RouteRefreshCapability {
    pub fn new() -> RouteRefreshCapability {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RouteRefreshCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteRefreshCapability {
        RouteRefreshCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RouteRefreshCapability>(
                    "RouteRefreshCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RouteRefreshCapability {
        static mut instance: ::protobuf::lazy::Lazy<RouteRefreshCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RouteRefreshCapability,
        };
        unsafe {
            instance.get(RouteRefreshCapability::new)
        }
    }
}

impl ::protobuf::Clear for RouteRefreshCapability {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteRefreshCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteRefreshCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CarryingLabelInfoCapability {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CarryingLabelInfoCapability {
    fn default() -> &'a CarryingLabelInfoCapability {
        <CarryingLabelInfoCapability as ::protobuf::Message>::default_instance()
    }
}

impl CarryingLabelInfoCapability {
    pub fn new() -> CarryingLabelInfoCapability {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CarryingLabelInfoCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CarryingLabelInfoCapability {
        CarryingLabelInfoCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CarryingLabelInfoCapability>(
                    "CarryingLabelInfoCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CarryingLabelInfoCapability {
        static mut instance: ::protobuf::lazy::Lazy<CarryingLabelInfoCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CarryingLabelInfoCapability,
        };
        unsafe {
            instance.get(CarryingLabelInfoCapability::new)
        }
    }
}

impl ::protobuf::Clear for CarryingLabelInfoCapability {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CarryingLabelInfoCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CarryingLabelInfoCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtendedNexthopCapabilityTuple {
    // message fields
    pub nlri_family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    pub nexthop_family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtendedNexthopCapabilityTuple {
    fn default() -> &'a ExtendedNexthopCapabilityTuple {
        <ExtendedNexthopCapabilityTuple as ::protobuf::Message>::default_instance()
    }
}

impl ExtendedNexthopCapabilityTuple {
    pub fn new() -> ExtendedNexthopCapabilityTuple {
        ::std::default::Default::default()
    }

    // .gobgpapi.Family nlri_family = 1;


    pub fn get_nlri_family(&self) -> &super::gobgp::Family {
        self.nlri_family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_nlri_family(&mut self) {
        self.nlri_family.clear();
    }

    pub fn has_nlri_family(&self) -> bool {
        self.nlri_family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nlri_family(&mut self, v: super::gobgp::Family) {
        self.nlri_family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nlri_family(&mut self) -> &mut super::gobgp::Family {
        if self.nlri_family.is_none() {
            self.nlri_family.set_default();
        }
        self.nlri_family.as_mut().unwrap()
    }

    // Take field
    pub fn take_nlri_family(&mut self) -> super::gobgp::Family {
        self.nlri_family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }

    // .gobgpapi.Family nexthop_family = 2;


    pub fn get_nexthop_family(&self) -> &super::gobgp::Family {
        self.nexthop_family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_nexthop_family(&mut self) {
        self.nexthop_family.clear();
    }

    pub fn has_nexthop_family(&self) -> bool {
        self.nexthop_family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nexthop_family(&mut self, v: super::gobgp::Family) {
        self.nexthop_family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nexthop_family(&mut self) -> &mut super::gobgp::Family {
        if self.nexthop_family.is_none() {
            self.nexthop_family.set_default();
        }
        self.nexthop_family.as_mut().unwrap()
    }

    // Take field
    pub fn take_nexthop_family(&mut self) -> super::gobgp::Family {
        self.nexthop_family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }
}

impl ::protobuf::Message for ExtendedNexthopCapabilityTuple {
    fn is_initialized(&self) -> bool {
        for v in &self.nlri_family {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nexthop_family {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nlri_family)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nexthop_family)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.nlri_family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.nexthop_family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.nlri_family.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.nexthop_family.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtendedNexthopCapabilityTuple {
        ExtendedNexthopCapabilityTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "nlri_family",
                    |m: &ExtendedNexthopCapabilityTuple| { &m.nlri_family },
                    |m: &mut ExtendedNexthopCapabilityTuple| { &mut m.nlri_family },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "nexthop_family",
                    |m: &ExtendedNexthopCapabilityTuple| { &m.nexthop_family },
                    |m: &mut ExtendedNexthopCapabilityTuple| { &mut m.nexthop_family },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtendedNexthopCapabilityTuple>(
                    "ExtendedNexthopCapabilityTuple",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtendedNexthopCapabilityTuple {
        static mut instance: ::protobuf::lazy::Lazy<ExtendedNexthopCapabilityTuple> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtendedNexthopCapabilityTuple,
        };
        unsafe {
            instance.get(ExtendedNexthopCapabilityTuple::new)
        }
    }
}

impl ::protobuf::Clear for ExtendedNexthopCapabilityTuple {
    fn clear(&mut self) {
        self.nlri_family.clear();
        self.nexthop_family.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtendedNexthopCapabilityTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendedNexthopCapabilityTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtendedNexthopCapability {
    // message fields
    pub tuples: ::protobuf::RepeatedField<ExtendedNexthopCapabilityTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtendedNexthopCapability {
    fn default() -> &'a ExtendedNexthopCapability {
        <ExtendedNexthopCapability as ::protobuf::Message>::default_instance()
    }
}

impl ExtendedNexthopCapability {
    pub fn new() -> ExtendedNexthopCapability {
        ::std::default::Default::default()
    }

    // repeated .gobgpapi.ExtendedNexthopCapabilityTuple tuples = 1;


    pub fn get_tuples(&self) -> &[ExtendedNexthopCapabilityTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<ExtendedNexthopCapabilityTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<ExtendedNexthopCapabilityTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<ExtendedNexthopCapabilityTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtendedNexthopCapability {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtendedNexthopCapability {
        ExtendedNexthopCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtendedNexthopCapabilityTuple>>(
                    "tuples",
                    |m: &ExtendedNexthopCapability| { &m.tuples },
                    |m: &mut ExtendedNexthopCapability| { &mut m.tuples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtendedNexthopCapability>(
                    "ExtendedNexthopCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtendedNexthopCapability {
        static mut instance: ::protobuf::lazy::Lazy<ExtendedNexthopCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtendedNexthopCapability,
        };
        unsafe {
            instance.get(ExtendedNexthopCapability::new)
        }
    }
}

impl ::protobuf::Clear for ExtendedNexthopCapability {
    fn clear(&mut self) {
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtendedNexthopCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendedNexthopCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GracefulRestartCapabilityTuple {
    // message fields
    pub family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    pub flags: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GracefulRestartCapabilityTuple {
    fn default() -> &'a GracefulRestartCapabilityTuple {
        <GracefulRestartCapabilityTuple as ::protobuf::Message>::default_instance()
    }
}

impl GracefulRestartCapabilityTuple {
    pub fn new() -> GracefulRestartCapabilityTuple {
        ::std::default::Default::default()
    }

    // .gobgpapi.Family family = 1;


    pub fn get_family(&self) -> &super::gobgp::Family {
        self.family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    pub fn has_family(&self) -> bool {
        self.family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: super::gobgp::Family) {
        self.family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut super::gobgp::Family {
        if self.family.is_none() {
            self.family.set_default();
        }
        self.family.as_mut().unwrap()
    }

    // Take field
    pub fn take_family(&mut self) -> super::gobgp::Family {
        self.family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }

    // uint32 flags = 2;


    pub fn get_flags(&self) -> u32 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = v;
    }
}

impl ::protobuf::Message for GracefulRestartCapabilityTuple {
    fn is_initialized(&self) -> bool {
        for v in &self.family {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.family)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(2, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.family.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.flags != 0 {
            os.write_uint32(2, self.flags)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GracefulRestartCapabilityTuple {
        GracefulRestartCapabilityTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "family",
                    |m: &GracefulRestartCapabilityTuple| { &m.family },
                    |m: &mut GracefulRestartCapabilityTuple| { &mut m.family },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "flags",
                    |m: &GracefulRestartCapabilityTuple| { &m.flags },
                    |m: &mut GracefulRestartCapabilityTuple| { &mut m.flags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GracefulRestartCapabilityTuple>(
                    "GracefulRestartCapabilityTuple",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GracefulRestartCapabilityTuple {
        static mut instance: ::protobuf::lazy::Lazy<GracefulRestartCapabilityTuple> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GracefulRestartCapabilityTuple,
        };
        unsafe {
            instance.get(GracefulRestartCapabilityTuple::new)
        }
    }
}

impl ::protobuf::Clear for GracefulRestartCapabilityTuple {
    fn clear(&mut self) {
        self.family.clear();
        self.flags = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GracefulRestartCapabilityTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GracefulRestartCapabilityTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GracefulRestartCapability {
    // message fields
    pub flags: u32,
    pub time: u32,
    pub tuples: ::protobuf::RepeatedField<GracefulRestartCapabilityTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GracefulRestartCapability {
    fn default() -> &'a GracefulRestartCapability {
        <GracefulRestartCapability as ::protobuf::Message>::default_instance()
    }
}

impl GracefulRestartCapability {
    pub fn new() -> GracefulRestartCapability {
        ::std::default::Default::default()
    }

    // uint32 flags = 1;


    pub fn get_flags(&self) -> u32 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = v;
    }

    // uint32 time = 2;


    pub fn get_time(&self) -> u32 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = v;
    }

    // repeated .gobgpapi.GracefulRestartCapabilityTuple tuples = 3;


    pub fn get_tuples(&self) -> &[GracefulRestartCapabilityTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<GracefulRestartCapabilityTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<GracefulRestartCapabilityTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<GracefulRestartCapabilityTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GracefulRestartCapability {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(1, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.flags != 0 {
            os.write_uint32(1, self.flags)?;
        }
        if self.time != 0 {
            os.write_uint32(2, self.time)?;
        }
        for v in &self.tuples {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GracefulRestartCapability {
        GracefulRestartCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "flags",
                    |m: &GracefulRestartCapability| { &m.flags },
                    |m: &mut GracefulRestartCapability| { &mut m.flags },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time",
                    |m: &GracefulRestartCapability| { &m.time },
                    |m: &mut GracefulRestartCapability| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GracefulRestartCapabilityTuple>>(
                    "tuples",
                    |m: &GracefulRestartCapability| { &m.tuples },
                    |m: &mut GracefulRestartCapability| { &mut m.tuples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GracefulRestartCapability>(
                    "GracefulRestartCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GracefulRestartCapability {
        static mut instance: ::protobuf::lazy::Lazy<GracefulRestartCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GracefulRestartCapability,
        };
        unsafe {
            instance.get(GracefulRestartCapability::new)
        }
    }
}

impl ::protobuf::Clear for GracefulRestartCapability {
    fn clear(&mut self) {
        self.flags = 0;
        self.time = 0;
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GracefulRestartCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GracefulRestartCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FourOctetASNumberCapability {
    // message fields
    pub field_as: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FourOctetASNumberCapability {
    fn default() -> &'a FourOctetASNumberCapability {
        <FourOctetASNumberCapability as ::protobuf::Message>::default_instance()
    }
}

impl FourOctetASNumberCapability {
    pub fn new() -> FourOctetASNumberCapability {
        ::std::default::Default::default()
    }

    // uint32 as = 1;


    pub fn get_field_as(&self) -> u32 {
        self.field_as
    }
    pub fn clear_field_as(&mut self) {
        self.field_as = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_as(&mut self, v: u32) {
        self.field_as = v;
    }
}

impl ::protobuf::Message for FourOctetASNumberCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_as = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_as != 0 {
            my_size += ::protobuf::rt::value_size(1, self.field_as, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_as != 0 {
            os.write_uint32(1, self.field_as)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FourOctetASNumberCapability {
        FourOctetASNumberCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "as",
                    |m: &FourOctetASNumberCapability| { &m.field_as },
                    |m: &mut FourOctetASNumberCapability| { &mut m.field_as },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FourOctetASNumberCapability>(
                    "FourOctetASNumberCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FourOctetASNumberCapability {
        static mut instance: ::protobuf::lazy::Lazy<FourOctetASNumberCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FourOctetASNumberCapability,
        };
        unsafe {
            instance.get(FourOctetASNumberCapability::new)
        }
    }
}

impl ::protobuf::Clear for FourOctetASNumberCapability {
    fn clear(&mut self) {
        self.field_as = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FourOctetASNumberCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FourOctetASNumberCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddPathCapabilityTuple {
    // message fields
    pub family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    pub mode: AddPathMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddPathCapabilityTuple {
    fn default() -> &'a AddPathCapabilityTuple {
        <AddPathCapabilityTuple as ::protobuf::Message>::default_instance()
    }
}

impl AddPathCapabilityTuple {
    pub fn new() -> AddPathCapabilityTuple {
        ::std::default::Default::default()
    }

    // .gobgpapi.Family family = 1;


    pub fn get_family(&self) -> &super::gobgp::Family {
        self.family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    pub fn has_family(&self) -> bool {
        self.family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: super::gobgp::Family) {
        self.family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut super::gobgp::Family {
        if self.family.is_none() {
            self.family.set_default();
        }
        self.family.as_mut().unwrap()
    }

    // Take field
    pub fn take_family(&mut self) -> super::gobgp::Family {
        self.family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }

    // .gobgpapi.AddPathMode mode = 2;


    pub fn get_mode(&self) -> AddPathMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = AddPathMode::MODE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: AddPathMode) {
        self.mode = v;
    }
}

impl ::protobuf::Message for AddPathCapabilityTuple {
    fn is_initialized(&self) -> bool {
        for v in &self.family {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.family)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mode != AddPathMode::MODE_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.family.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mode != AddPathMode::MODE_NONE {
            os.write_enum(2, self.mode.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddPathCapabilityTuple {
        AddPathCapabilityTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "family",
                    |m: &AddPathCapabilityTuple| { &m.family },
                    |m: &mut AddPathCapabilityTuple| { &mut m.family },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AddPathMode>>(
                    "mode",
                    |m: &AddPathCapabilityTuple| { &m.mode },
                    |m: &mut AddPathCapabilityTuple| { &mut m.mode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddPathCapabilityTuple>(
                    "AddPathCapabilityTuple",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddPathCapabilityTuple {
        static mut instance: ::protobuf::lazy::Lazy<AddPathCapabilityTuple> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddPathCapabilityTuple,
        };
        unsafe {
            instance.get(AddPathCapabilityTuple::new)
        }
    }
}

impl ::protobuf::Clear for AddPathCapabilityTuple {
    fn clear(&mut self) {
        self.family.clear();
        self.mode = AddPathMode::MODE_NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddPathCapabilityTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPathCapabilityTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddPathCapability {
    // message fields
    pub tuples: ::protobuf::RepeatedField<AddPathCapabilityTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddPathCapability {
    fn default() -> &'a AddPathCapability {
        <AddPathCapability as ::protobuf::Message>::default_instance()
    }
}

impl AddPathCapability {
    pub fn new() -> AddPathCapability {
        ::std::default::Default::default()
    }

    // repeated .gobgpapi.AddPathCapabilityTuple tuples = 1;


    pub fn get_tuples(&self) -> &[AddPathCapabilityTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<AddPathCapabilityTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<AddPathCapabilityTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<AddPathCapabilityTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddPathCapability {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddPathCapability {
        AddPathCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddPathCapabilityTuple>>(
                    "tuples",
                    |m: &AddPathCapability| { &m.tuples },
                    |m: &mut AddPathCapability| { &mut m.tuples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddPathCapability>(
                    "AddPathCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddPathCapability {
        static mut instance: ::protobuf::lazy::Lazy<AddPathCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddPathCapability,
        };
        unsafe {
            instance.get(AddPathCapability::new)
        }
    }
}

impl ::protobuf::Clear for AddPathCapability {
    fn clear(&mut self) {
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddPathCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPathCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnhancedRouteRefreshCapability {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnhancedRouteRefreshCapability {
    fn default() -> &'a EnhancedRouteRefreshCapability {
        <EnhancedRouteRefreshCapability as ::protobuf::Message>::default_instance()
    }
}

impl EnhancedRouteRefreshCapability {
    pub fn new() -> EnhancedRouteRefreshCapability {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EnhancedRouteRefreshCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnhancedRouteRefreshCapability {
        EnhancedRouteRefreshCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<EnhancedRouteRefreshCapability>(
                    "EnhancedRouteRefreshCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnhancedRouteRefreshCapability {
        static mut instance: ::protobuf::lazy::Lazy<EnhancedRouteRefreshCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnhancedRouteRefreshCapability,
        };
        unsafe {
            instance.get(EnhancedRouteRefreshCapability::new)
        }
    }
}

impl ::protobuf::Clear for EnhancedRouteRefreshCapability {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnhancedRouteRefreshCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnhancedRouteRefreshCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongLivedGracefulRestartCapabilityTuple {
    // message fields
    pub family: ::protobuf::SingularPtrField<super::gobgp::Family>,
    pub flags: u32,
    pub time: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongLivedGracefulRestartCapabilityTuple {
    fn default() -> &'a LongLivedGracefulRestartCapabilityTuple {
        <LongLivedGracefulRestartCapabilityTuple as ::protobuf::Message>::default_instance()
    }
}

impl LongLivedGracefulRestartCapabilityTuple {
    pub fn new() -> LongLivedGracefulRestartCapabilityTuple {
        ::std::default::Default::default()
    }

    // .gobgpapi.Family family = 1;


    pub fn get_family(&self) -> &super::gobgp::Family {
        self.family.as_ref().unwrap_or_else(|| super::gobgp::Family::default_instance())
    }
    pub fn clear_family(&mut self) {
        self.family.clear();
    }

    pub fn has_family(&self) -> bool {
        self.family.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: super::gobgp::Family) {
        self.family = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_family(&mut self) -> &mut super::gobgp::Family {
        if self.family.is_none() {
            self.family.set_default();
        }
        self.family.as_mut().unwrap()
    }

    // Take field
    pub fn take_family(&mut self) -> super::gobgp::Family {
        self.family.take().unwrap_or_else(|| super::gobgp::Family::new())
    }

    // uint32 flags = 2;


    pub fn get_flags(&self) -> u32 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = v;
    }

    // uint32 time = 3;


    pub fn get_time(&self) -> u32 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = v;
    }
}

impl ::protobuf::Message for LongLivedGracefulRestartCapabilityTuple {
    fn is_initialized(&self) -> bool {
        for v in &self.family {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.family)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.family.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(2, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.family.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.flags != 0 {
            os.write_uint32(2, self.flags)?;
        }
        if self.time != 0 {
            os.write_uint32(3, self.time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongLivedGracefulRestartCapabilityTuple {
        LongLivedGracefulRestartCapabilityTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gobgp::Family>>(
                    "family",
                    |m: &LongLivedGracefulRestartCapabilityTuple| { &m.family },
                    |m: &mut LongLivedGracefulRestartCapabilityTuple| { &mut m.family },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "flags",
                    |m: &LongLivedGracefulRestartCapabilityTuple| { &m.flags },
                    |m: &mut LongLivedGracefulRestartCapabilityTuple| { &mut m.flags },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time",
                    |m: &LongLivedGracefulRestartCapabilityTuple| { &m.time },
                    |m: &mut LongLivedGracefulRestartCapabilityTuple| { &mut m.time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongLivedGracefulRestartCapabilityTuple>(
                    "LongLivedGracefulRestartCapabilityTuple",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongLivedGracefulRestartCapabilityTuple {
        static mut instance: ::protobuf::lazy::Lazy<LongLivedGracefulRestartCapabilityTuple> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongLivedGracefulRestartCapabilityTuple,
        };
        unsafe {
            instance.get(LongLivedGracefulRestartCapabilityTuple::new)
        }
    }
}

impl ::protobuf::Clear for LongLivedGracefulRestartCapabilityTuple {
    fn clear(&mut self) {
        self.family.clear();
        self.flags = 0;
        self.time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongLivedGracefulRestartCapabilityTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongLivedGracefulRestartCapabilityTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongLivedGracefulRestartCapability {
    // message fields
    pub tuples: ::protobuf::RepeatedField<LongLivedGracefulRestartCapabilityTuple>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongLivedGracefulRestartCapability {
    fn default() -> &'a LongLivedGracefulRestartCapability {
        <LongLivedGracefulRestartCapability as ::protobuf::Message>::default_instance()
    }
}

impl LongLivedGracefulRestartCapability {
    pub fn new() -> LongLivedGracefulRestartCapability {
        ::std::default::Default::default()
    }

    // repeated .gobgpapi.LongLivedGracefulRestartCapabilityTuple tuples = 1;


    pub fn get_tuples(&self) -> &[LongLivedGracefulRestartCapabilityTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<LongLivedGracefulRestartCapabilityTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<LongLivedGracefulRestartCapabilityTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<LongLivedGracefulRestartCapabilityTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LongLivedGracefulRestartCapability {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tuples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongLivedGracefulRestartCapability {
        LongLivedGracefulRestartCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LongLivedGracefulRestartCapabilityTuple>>(
                    "tuples",
                    |m: &LongLivedGracefulRestartCapability| { &m.tuples },
                    |m: &mut LongLivedGracefulRestartCapability| { &mut m.tuples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongLivedGracefulRestartCapability>(
                    "LongLivedGracefulRestartCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongLivedGracefulRestartCapability {
        static mut instance: ::protobuf::lazy::Lazy<LongLivedGracefulRestartCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongLivedGracefulRestartCapability,
        };
        unsafe {
            instance.get(LongLivedGracefulRestartCapability::new)
        }
    }
}

impl ::protobuf::Clear for LongLivedGracefulRestartCapability {
    fn clear(&mut self) {
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongLivedGracefulRestartCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongLivedGracefulRestartCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteRefreshCiscoCapability {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteRefreshCiscoCapability {
    fn default() -> &'a RouteRefreshCiscoCapability {
        <RouteRefreshCiscoCapability as ::protobuf::Message>::default_instance()
    }
}

impl RouteRefreshCiscoCapability {
    pub fn new() -> RouteRefreshCiscoCapability {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RouteRefreshCiscoCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteRefreshCiscoCapability {
        RouteRefreshCiscoCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RouteRefreshCiscoCapability>(
                    "RouteRefreshCiscoCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RouteRefreshCiscoCapability {
        static mut instance: ::protobuf::lazy::Lazy<RouteRefreshCiscoCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RouteRefreshCiscoCapability,
        };
        unsafe {
            instance.get(RouteRefreshCiscoCapability::new)
        }
    }
}

impl ::protobuf::Clear for RouteRefreshCiscoCapability {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteRefreshCiscoCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteRefreshCiscoCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnknownCapability {
    // message fields
    pub code: u32,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnknownCapability {
    fn default() -> &'a UnknownCapability {
        <UnknownCapability as ::protobuf::Message>::default_instance()
    }
}

impl UnknownCapability {
    pub fn new() -> UnknownCapability {
        ::std::default::Default::default()
    }

    // uint32 code = 1;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UnknownCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_uint32(1, self.code)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnknownCapability {
        UnknownCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "code",
                    |m: &UnknownCapability| { &m.code },
                    |m: &mut UnknownCapability| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &UnknownCapability| { &m.value },
                    |m: &mut UnknownCapability| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UnknownCapability>(
                    "UnknownCapability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UnknownCapability {
        static mut instance: ::protobuf::lazy::Lazy<UnknownCapability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UnknownCapability,
        };
        unsafe {
            instance.get(UnknownCapability::new)
        }
    }
}

impl ::protobuf::Clear for UnknownCapability {
    fn clear(&mut self) {
        self.code = 0;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnknownCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnknownCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AddPathMode {
    MODE_NONE = 0,
    MODE_RECEIVE = 1,
    MODE_SEND = 2,
    MODE_BOTH = 3,
}

impl ::protobuf::ProtobufEnum for AddPathMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AddPathMode> {
        match value {
            0 => ::std::option::Option::Some(AddPathMode::MODE_NONE),
            1 => ::std::option::Option::Some(AddPathMode::MODE_RECEIVE),
            2 => ::std::option::Option::Some(AddPathMode::MODE_SEND),
            3 => ::std::option::Option::Some(AddPathMode::MODE_BOTH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AddPathMode] = &[
            AddPathMode::MODE_NONE,
            AddPathMode::MODE_RECEIVE,
            AddPathMode::MODE_SEND,
            AddPathMode::MODE_BOTH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AddPathMode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AddPathMode {
}

impl ::std::default::Default for AddPathMode {
    fn default() -> Self {
        AddPathMode::MODE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPathMode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10capability.proto\x12\x08gobgpapi\x1a\x0bgobgp.proto\"C\n\x17MultiP\
    rotocolCapability\x12(\n\x06family\x18\x01\x20\x01(\x0b2\x10.gobgpapi.Fa\
    milyR\x06family\"\x18\n\x16RouteRefreshCapability\"\x1d\n\x1bCarryingLab\
    elInfoCapability\"\x8c\x01\n\x1eExtendedNexthopCapabilityTuple\x121\n\
    \x0bnlri_family\x18\x01\x20\x01(\x0b2\x10.gobgpapi.FamilyR\nnlriFamily\
    \x127\n\x0enexthop_family\x18\x02\x20\x01(\x0b2\x10.gobgpapi.FamilyR\rne\
    xthopFamily\"]\n\x19ExtendedNexthopCapability\x12@\n\x06tuples\x18\x01\
    \x20\x03(\x0b2(.gobgpapi.ExtendedNexthopCapabilityTupleR\x06tuples\"`\n\
    \x1eGracefulRestartCapabilityTuple\x12(\n\x06family\x18\x01\x20\x01(\x0b\
    2\x10.gobgpapi.FamilyR\x06family\x12\x14\n\x05flags\x18\x02\x20\x01(\rR\
    \x05flags\"\x87\x01\n\x19GracefulRestartCapability\x12\x14\n\x05flags\
    \x18\x01\x20\x01(\rR\x05flags\x12\x12\n\x04time\x18\x02\x20\x01(\rR\x04t\
    ime\x12@\n\x06tuples\x18\x03\x20\x03(\x0b2(.gobgpapi.GracefulRestartCapa\
    bilityTupleR\x06tuples\"-\n\x1bFourOctetASNumberCapability\x12\x0e\n\x02\
    as\x18\x01\x20\x01(\rR\x02as\"m\n\x16AddPathCapabilityTuple\x12(\n\x06fa\
    mily\x18\x01\x20\x01(\x0b2\x10.gobgpapi.FamilyR\x06family\x12)\n\x04mode\
    \x18\x02\x20\x01(\x0e2\x15.gobgpapi.AddPathModeR\x04mode\"M\n\x11AddPath\
    Capability\x128\n\x06tuples\x18\x01\x20\x03(\x0b2\x20.gobgpapi.AddPathCa\
    pabilityTupleR\x06tuples\"\x20\n\x1eEnhancedRouteRefreshCapability\"}\n'\
    LongLivedGracefulRestartCapabilityTuple\x12(\n\x06family\x18\x01\x20\x01\
    (\x0b2\x10.gobgpapi.FamilyR\x06family\x12\x14\n\x05flags\x18\x02\x20\x01\
    (\rR\x05flags\x12\x12\n\x04time\x18\x03\x20\x01(\rR\x04time\"o\n\"LongLi\
    vedGracefulRestartCapability\x12I\n\x06tuples\x18\x01\x20\x03(\x0b21.gob\
    gpapi.LongLivedGracefulRestartCapabilityTupleR\x06tuples\"\x1d\n\x1bRout\
    eRefreshCiscoCapability\"=\n\x11UnknownCapability\x12\x12\n\x04code\x18\
    \x01\x20\x01(\rR\x04code\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05val\
    ue*L\n\x0bAddPathMode\x12\r\n\tMODE_NONE\x10\0\x12\x10\n\x0cMODE_RECEIVE\
    \x10\x01\x12\r\n\tMODE_SEND\x10\x02\x12\r\n\tMODE_BOTH\x10\x03b\x06proto\
    3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
